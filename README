MICRON INFORMATION
==================

Repo location:
    https://stash.micron.com/stash/scm/nve_tsw/dnvme.git

This is a fork of the following repo:
    https://github.com/nvmecompliance/dnvme

Contacts
--------
Will Marone
Michael Schoberg
Robert Randall

Main Changes from Upstream
--------------------------
    - Add PCI B.D.F. in metrics_device->public_dev. So that it is available to user through IOCTL_GET_DEVICE_METRICS. (change for AMP)
    - Fix memory leak and memory corruption issue in dnvme when a device is removed and then re-probed (using unbind and bind).
    - Port fix from NVMEX project. Fixes incrementing in driver_generic_write().
    - Convert to DKMS build that produces a deb package, the old makefile only build is now intentionally broken.  You can use Makefile.dev if you need to use the original makefile for development.

Installation Instructions [Trusty/14.04, Xenial/16.04]
---------------------------------------------
    - Add the following line to /etc/apt/sources.list
        deb http://10.113.22.79 trusty/

    - Execute the following commands:

        $ sudo apt-get update

        $ sudo apt-get install dnvme-dkms

    - The package can be removed at any time with apt-get remove dnvme-dkms


Compatibility
-------------
    - Trusty/14.04
    - Xenial/16.04

Requirements
------------
    - Packages

        > debhelper

        > dkms

    - A clean clone of the repo


Standard Build Steps
--------------------

    - Run the following command, with an optional N threads:

        $ make -f Makefile.dev [-j<N>]

DKMS Deb Build Steps
--------------------

    - Increment the minor version number in version.h, keep note of the new
      version number.

    - Update debian/changelog file with change messages and release notes
      where {MAJOR} and {MINOR} are the new version you would like to use:

        $ dch -v {MAJOR}.{MINOR}-1

    - Commit to a branch and push your changes.

    - Run the package.sh script, giving the package version as the first and
      only parameter:

      $ ./package.sh {MAJOR}.{MINOR}

      This script will generate the tarball, excluding the debian directory,
      in the parent directory, then kick off dpkg-buildpackage.

      NOTE: dpkg-buildpackage is currently run with -uc -us parameters which
      disables signing of both the .changes file and the source package.

    - This should yield the following outputs in the parent directory:
        dnvme_{MAJOR}.{MINOR}-1_amd64.changes
        dnvme_{MAJOR}.{MINOR}-1.debian.tar.gz
        dnvme_{MAJOR}.{MINOR}-1.dsc
        dnvme_{MAJOR}.{MINOR}.orig.tar.gz
        dnvme-dkms_{MAJOR}.{MINOR}-1_all.deb

    - Copy these over to a staging area on wdlabfs1 in a folder named
      'dnvme_3.2-1'

    - On the package server (currently named 'wdlapppa' on the lab network):
        - Locate the packages and use the command:

            $ sudo dput local dnvme_{MAJOR}.{MINOR}-1_amd64.changes

            to get them added to the package server.

        - Verify the packages are in ~/archive/trusty and ~/archive/xenial.

    - Assuming everything was successful, merge to develop, tag it, and push.
